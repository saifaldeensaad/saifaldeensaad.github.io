// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
  // ===== Current Year in Footer =====
  document.getElementById('year').textContent = new Date().getFullYear();

  // ===== Theme Toggle Functionality =====
  const themeToggle = document.createElement('button');
  themeToggle.id = 'theme-toggle';
  themeToggle.className = 'theme-toggle';
  themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
  themeToggle.setAttribute('aria-label', 'Toggle dark mode');
  document.body.appendChild(themeToggle);

  // Check for saved theme preference or use system preference
  const savedTheme = localStorage.getItem('theme') || 
                    (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  document.documentElement.setAttribute('data-theme', savedTheme);
  updateThemeIcon(savedTheme);

  themeToggle.addEventListener('click', () => {
    const currentTheme = document.documentElement.getAttribute('data-theme');
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
    updateThemeIcon(newTheme);
  });

  function updateThemeIcon(theme) {
    const icon = themeToggle.querySelector('i');
    icon.classList.toggle('fa-moon', theme === 'light');
    icon.classList.toggle('fa-sun', theme === 'dark');
  }

  // ===== Mobile Menu Toggle =====
  const hamburger = document.querySelector('.hamburger');
  const navLinks = document.querySelector('.nav-links');

  if (hamburger && navLinks) {
    hamburger.addEventListener('click', function() {
      this.classList.toggle('active');
      navLinks.classList.toggle('active');
      document.body.classList.toggle('no-scroll');
      this.setAttribute('aria-expanded', this.classList.contains('active'));
    });

    // Close mobile menu when clicking on a link
    document.querySelectorAll('.nav-links a').forEach(link => {
      link.addEventListener('click', () => {
        if (navLinks.classList.contains('active')) {
          hamburger.classList.remove('active');
          navLinks.classList.remove('active');
          document.body.classList.remove('no-scroll');
          hamburger.setAttribute('aria-expanded', 'false');
        }
      });
    });
  }

  // ===== Enhanced Smooth Scrolling =====
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      // Skip if it's a non-section link
      if (this.getAttribute('href') === '#' || 
          this.classList.contains('external-link')) {
        return;
      }

      e.preventDefault();
      const targetId = this.getAttribute('href');
      const targetElement = document.querySelector(targetId);
      
      if (targetElement) {
        // Calculate scroll position with navbar offset
        const navbarHeight = document.querySelector('.navbar').offsetHeight;
        const additionalOffset = window.innerWidth < 768 ? 20 : 40; // More offset on mobile
        const targetPosition = targetElement.getBoundingClientRect().top + 
                              window.pageYOffset - 
                              navbarHeight - 
                              additionalOffset;

        // Use native smooth scroll if available
        if ('scrollBehavior' in document.documentElement.style) {
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        } else {
          // Polyfill for smooth scrolling
          smoothScrollTo(targetPosition, 800);
        }
        
        // Update URL without jumping
        if (history.pushState) {
          history.pushState(null, null, targetId);
        } else {
          window.location.hash = targetId;
        }
      }
    });
  });

  // Smooth scroll polyfill
  function smoothScrollTo(endY, duration) {
    const startY = window.pageYOffset;
    const distance = endY - startY;
    const startTime = performance.now();

    function step(currentTime) {
      const elapsedTime = currentTime - startTime;
      const progress = Math.min(elapsedTime / duration, 1);
      const easeProgress = easeInOutCubic(progress);
      
      window.scrollTo(0, startY + (distance * easeProgress));
      
      if (progress < 1) {
        requestAnimationFrame(step);
      }
    }

    function easeInOutCubic(t) {
      return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
    }

    requestAnimationFrame(step);
  }

  // ===== Sticky Navigation with Scroll Direction Detection =====
  const navbar = document.querySelector('.navbar');
  let lastScrollPosition = window.pageYOffset;
  let ticking = false;
  
  function updateNavbar() {
    const currentScrollPosition = window.pageYOffset;
    
    if (currentScrollPosition > 50) {
      navbar.classList.add('scrolled');
      
      // Hide navbar when scrolling down, show when scrolling up
      if (currentScrollPosition > lastScrollPosition && currentScrollPosition > 100) {
        navbar.style.transform = 'translateY(-100%)';
      } else {
        navbar.style.transform = 'translateY(0)';
      }
    } else {
      navbar.classList.remove('scrolled');
      navbar.style.transform = 'translateY(0)';
    }
    
    lastScrollPosition = currentScrollPosition;
    ticking = false;
  }

  // Throttle scroll events with requestAnimationFrame
  window.addEventListener('scroll', function() {
    if (!ticking) {
      window.requestAnimationFrame(updateNavbar);
      ticking = true;
    }
  });

  // ===== Active Section Highlighting =====
  const sections = document.querySelectorAll('section');
  const navItems = document.querySelectorAll('.nav-links a');

  function updateActiveSection() {
    let currentSection = '';
    
    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      const sectionId = section.getAttribute('id');
      
      if (window.pageYOffset >= (sectionTop - 200) && 
          window.pageYOffset < (sectionTop + sectionHeight - 200)) {
        currentSection = sectionId;
      }
    });
    
    navItems.forEach(item => {
      item.classList.remove('active');
      if (item.getAttribute('href') === `#${currentSection}`) {
        item.classList.add('active');
      }
    });
  }

  // Run once on load and then on scroll
  updateActiveSection();
  window.addEventListener('scroll', updateActiveSection);

  // ===== Intersection Observer for Animations =====
  const animateOnScroll = (elements, options) => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
          observer.unobserve(entry.target);
        }
      });
    }, options);

    elements.forEach(el => observer.observe(el));
  };

  // Configure animation triggers
  animateOnScroll(document.querySelectorAll('.card, .hero-content, section'), {
    threshold: 0.1,
    rootMargin: '0px 0px -100px 0px'
  });

  // ===== Accessibility Improvements =====
  // Show focus outlines when tabbing
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Tab') {
      document.body.classList.add('show-focus');
    }
  });

  document.addEventListener('mousedown', function() {
    document.body.classList.remove('show-focus');
  });

  // Skip to content button
  const skipLink = document.createElement('a');
  skipLink.href = '#main-content';
  skipLink.className = 'skip-link';
  skipLink.textContent = 'Skip to main content';
  document.body.insertBefore(skipLink, document.body.firstChild);

  // ===== Project Card Hover Effects =====
  document.querySelectorAll('.card').forEach(card => {
    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      const angleX = (y - centerY) / 20;
      const angleY = (centerX - x) / 20;
      
      card.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg)`;
    });

    card.addEventListener('mouseleave', () => {
      card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
    });
  });

  // ===== Contact Form Validation =====
  const contactForm = document.querySelector('#contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', function(e) {
      e.preventDefault();
      // Add form validation logic here
      console.log('Form submitted!');
    });
  }

  // ===== Lazy Loading for Images =====
  if ('loading' in HTMLImageElement.prototype) {
    // Native lazy loading supported
    document.querySelectorAll('img[loading="lazy"]').forEach(img => {
      img.src = img.dataset.src;
    });
  } else {
    // Fallback with Intersection Observer
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');
    const lazyObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          lazyObserver.unobserve(img);
        }
      });
    });

    lazyImages.forEach(img => lazyObserver.observe(img));
  }
});

// ===== Service Worker Registration (PWA) =====
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js').then(registration => {
      console.log('ServiceWorker registration successful');
    }).catch(err => {
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}
